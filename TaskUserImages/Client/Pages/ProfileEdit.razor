@page "/Profile/Edit"
@using Microsoft.AspNetCore.Authorization;
@using TaskUserImages.Client.API;
@inject IImageFriendsAPI api
@inject ISnackbar snackBar
@attribute [Authorize]

<PageTitle>Edit profile</PageTitle>
<MudFileUpload Accept=".jpg,.png,.jpeg" T="IReadOnlyList<IBrowserFile>" OnFilesChanged="UploadFiles" AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
@ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
    <ButtonTemplate>
        <MudPaper Height="300px" Outlined="true" Class="@DragClass">
            <MudText Typo="Typo.h6">Drag file or click here</MudText>
            @foreach (var img in existingImages)
            {
                <MudImage Height="100" Src="@img" />
            }
            <MudChipSet>
                @foreach (var uploaded in uploadedFiles)
                {
                    <MudChip>
                        @uploaded.Name
                    </MudChip>
                }
            </MudChipSet>
        </MudPaper>
    </ButtonTemplate>
</MudFileUpload>

<MudButton OnClick="SendFilesToServer">Send</MudButton>


@code {
    private const long MAXALLOWEDSIZE = 5120000;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    IList<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private List<string> existingImages = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            existingImages = await api.GetMyImageUrls();
            StateHasChanged();
        }
    }

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            this.uploadedFiles.Add(file);
        }
    }

    //Лучше бы Task WhenAll?
    private async Task SendFilesToServer()
    {
        foreach (var file in uploadedFiles)
        {
            if (file.Size>MAXALLOWEDSIZE)
            {
                snackBar.Add($"File {file.Name} exceeds max allowed size of 5MB", Severity.Error);
                continue;
            }
            using (Stream stream = file.OpenReadStream(MAXALLOWEDSIZE))
            {
                byte[] buffer = new byte[file.Size];
                int length = await stream.ReadAsync(buffer);
                await api.UploadImage(new(buffer));
            }
        }
        uploadedFiles.Clear();
        existingImages = await api.GetMyImageUrls();
        StateHasChanged();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
